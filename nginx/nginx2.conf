
user  nginx;
worker_processes  auto;
worker_rlimit_nofile 65535;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

events {
    worker_connections 2048;
    multi_accept on;
    use epoll;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;
    charset       utf-8;
    log_format    main  '$remote_addr - $remote_user [$time_local] "$request" '
                        '$status $body_bytes_sent "$http_referer" '
                        '"$http_user_agent" "$http_x_forwarded_for"';

    access_log    /var/log/nginx/access.log  main;
    #access_log  "pipe:rollback logs/access_log interval=1d baknum=7 maxsize=2G"  main;

    sendfile        on;
    tcp_nopush      on;
    tcp_nodelay     on;

    keepalive_timeout  75;
    #keepalive_requests 100;
    keepalive_requests 2000; # 设置在关闭连接之前可以复用的最大请求数为2000
    server_tokens      off;  # 隐藏Nginx版本号

    # 开启Gzip压缩,减小传输内容大小,提高页面加载速度
    gzip            on;
    gzip_comp_level 3;
    gzip_min_length 300;
    gzip_static     on;
    gzip_proxied    any;
    gzip_vary       on;
    gzip_buffers 64 8k;
    gzip_types      text/plain text/css application/json application/javascript application/x-javascript text/xml application/xml application/xml+rss text/javascript;

    client_body_buffer_size 128k;

    http3                           on;
    quic_gso                        on;   # 提高QUIC性能
    #quic_bpf                       on;   # 启用QUIC的BPF支持,用于进一步优化QUIC性能
    quic_active_connection_id_limit 4;    # QUIC连接的活动连接ID限制为4
    http3_max_concurrent_streams    256;  # 每个QUIC连接上允许的最大并发流数为256
    http3_stream_buffer_size        128k; # 每个HTTP/3流的缓冲区大小为128KB

    http2                           on;
    http2_max_concurrent_streams    256;  # 每个HTTP/2连接上允许的最大并发流数为256
    http2_recv_buffer_size          512k; # 设置HTTP/2接收缓冲区大小为512KB
    http2_chunk_size                16k;  # 设置HTTP/2响应数据的块大小为16KB

    ssl_prefer_server_ciphers       on;   # 选择服务器端指定的密码套件
    ssl_protocols TLSv1.3;                # 只使用TLSv1.3协议
    ssl_session_cache shared:SSL:30m;     # 启用SSL会话缓存,有效地减少SSL握手的开销,提高性能
    #ssl_session_cache off;
    ssl_session_timeout             1h;   # SSL会话的超时时间为1小时,会话超时之前客户端可以重新使用相同的会话，减少握手的开销
    ssl_session_tickets             off;  # 禁用SSL会话票据
    ssl_buffer_size                 32k;  # SSL传输缓冲区的大小为32KB
    ssl_stapling on;                      # 让服务器在握手过程中同时传递 OCSP 相应的技术
    ssl_stapling_verify on;

    ssl_ciphers ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256;

    #add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline';";
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always; # 启用HTTP严格传输安全(HSTS)头,强制浏览器仅通过HTTPS与服务器通信
    add_header X-Frame-Options "SAMEORIGIN";                                                    # 防止点击劫持攻击
    add_header X-XSS-Protection "1; mode=block";                                                # 启用浏览器的跨站脚本(XSS)过滤,并在检测到攻击时阻止页面加载
    add_header X-Powered-By "";                                                                 # 删除X-Powered-By字段
    add_header X-Content-Type-Options nosniff;                                                  # 防止浏览器进行MIME类型嗅探确保响应的内容类型与声明的类型一致,防止MIME类型混淆攻击
    add_header Referrer-Policy "no-referrer-when-downgrade";                                    # 控制HTTPReferer头的内容,保护用户隐私
    add_header Permissions-Policy "geolocation=(), microphone=()";                              # 通过Permissions-Policy头限制特定的浏览器API,防止未经授权的访问

    server_names_hash_max_size      1024; # 设置服务器名称(即域名)的哈希表的最大大小,默认值通常是512
    server_names_hash_bucket_size   128;  # 设置服务器名称哈希表的桶大小
    types_hash_max_size             2048; # 设置存储MIME类型的哈希表的最大大小,默认值通常是1024
    types_hash_bucket_size          128;  # 设置MIME类型哈希表的桶大小
    variables_hash_max_size         1024; # 设置存储NGINX变量的哈希表的最大大小,默认值通常是1024
    variables_hash_bucket_size      128;  # 设置变量哈希表的桶大小

    open_file_cache max=2000 inactive=30s; # 指定最多缓存2000个打开的文件描述符,一个文件在30秒内未被访问,则从缓存中移除
    open_file_cache_valid 60s;             # 指定NGINX在每60秒检查一次缓存的有效性
    open_file_cache_min_uses 4;            # 文件在缓存期间至少被使用4次,才能保留在缓存中
    open_file_cache_errors on;             # 启用对文件打开错误的缓存

    limit_conn_zone $binary_remote_addr zone=addr:20m;                # 定义连接数限制的共享内存区域,使用客户端的二进制形式的IP地址作为键,定义名为addr的共享内存区域大小为20MB
    limit_conn addr 30;                                               # 应用连接数限制的指令,使用前面定义的addr区域,允许每个客户端IP地址的最大并发连接数为30
    limit_req_zone $binary_remote_addr zone=ngx_zone:100m rate=45r/s; # 定义请求速率限制的共享内存区域,使用客户端的二进制形式的IP地址作为键,内存区域大小为100MB,每秒平均请求速率为45个
    limit_req zone=ngx_zone burst=160 nodelay;                        # 允许的最大突发请求数为160个,不延迟请求
    limit_rate      5m;                                               # 设置带宽限制 

    fastcgi_cache_path /var/cache/fst_cache levels=1:2 keys_zone=fst_cache:20m max_size=512m inactive=30m;
    proxy_cache_path /var/cache/ngx_cache levels=1:2 keys_zone=ngx_cache:5m inactive=30m use_temp_path=off;

    proxy_buffering         on;                        # 启用反向代理缓冲
    proxy_buffers 16 32k;                              # 每个NGINX worker进程的反向代理缓冲区大小,32: 缓冲区的数量16k: 每个缓冲区的大小为16KB
    proxy_busy_buffers_size 64k;                       # 每个NGINX worker进程中处于活动状态的反向代理缓冲区的大小限制
    proxy_connect_timeout   60s;                       # 设置与上游服务器建立连接的超时时间
    proxy_send_timeout      60s;                       # 设置向上游服务器发送请求数据的超时时间
    proxy_read_timeout      60s;                       # 设置从上游服务器读取响应数据的超时时间
    proxy_hide_header Server;                          # 隐藏后端服务器的Server头字段信息

    output_buffers 4 32k;                              # 指定用于存储每个连接的输出数据的内存大小和数量

    include /etc/nginx/conf.d/*.conf;
}
