user  nginx;
worker_processes  auto;                            # 自动设置工作进程数量，通常为 CPU 核心数
worker_rlimit_nofile 65535;                        # 设置每个工作进程可打开的最大文件描述符数量为 65535

error_log  /var/log/nginx/error.log notice;
pid        /var/run/nginx.pid;

events {
    multi_accept on;                               # 允许工作进程一次接受多个连接
    worker_connections 2048;                       # 每个工作进程最多可处理 2048 个连接
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;
    charset       utf-8;
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';
    access_log  /var/log/nginx/access.log  main;

    send_timeout    60s;           # 设置发送超时时间为60秒,如果在此时间内未发送数据,连接将被关闭
    sendfile        on;            # 启用高效文件传输允许Nginx直接从硬盘发送文件到网络连接,减少上下文切换
    tcp_nopush      on;            # 启用TCP_NOPUSH选项,优化大数据块的发送,以减少网络包数量
    tcp_nodelay     on;            # 启用TCP_NODELAY选项,减少延迟,确保数据包尽快发送,适用于小数据量的快速交互

    keepalive_timeout  120s;       # 设置保持活动连接的超时时间为120秒,超时后关闭连接
    keepalive_requests 8000;       # 设置在关闭连接之前可以复用的最大请求数为8000
    server_tokens      off;        # 隐藏Nginx版本号

    # 开启Gzip压缩,减小传输内容大小,提高页面加载速度
    gzip            on;
    gzip_comp_level 4;             # 设置Gzip压缩级别为4(范围为1-9,越高压缩率越高但占用CPU更多)
    gzip_min_length 50;            # 设置进行压缩的最小文件长度为50字节
    gzip_static     on;            # 启用静态文件的Gzip压缩(如果已存在压缩文件,将直接使用)
    gzip_proxied    any;           # 启用代理请求的Gzip压缩
    gzip_vary       on;            # 启用Vary头,告诉代理缓存Gzip和非Gzip版本
    gzip_buffers 64 8k;            # 设置用于Gzip压缩的缓冲区数量和大小(64个8k的缓冲区)
    # 指定要压缩的MIME类型
    gzip_types application/atom+xml application/javascript application/json application/vnd.api+json application/rss+xml
                application/vnd.ms-fontobject application/x-font-opentype application/x-font-truetype
                application/x-font-ttf application/x-javascript application/xhtml+xml application/xml
                font/eot font/opentype font/otf font/truetype image/svg+xml image/vnd.microsoft.icon
                image/x-icon image/x-win-bitmap text/css text/richtext text/plain text/x-script
                text/x-component text/x-java-source text/x-markdown text/javascript text/xml
                application/x-perl application/x-httpd-cgi multipart/bag multipart/mixed application/wasm;

    client_header_buffer_size   4k;       # 设置客户端请求头的缓冲区大小为4k
    client_body_buffer_size     256k;     # 设置客户端请求体的缓冲区大小为256k
    large_client_header_buffers 8 16k;    # 设置较大的客户端请求头缓冲区数量和大小(8个16k的缓冲区)
    output_buffers              8 1024k;  # 设置输出缓冲区数量和大小(8个1024k的缓冲区)
    client_body_timeout         60s;      # 设置客户端请求体的超时时间为60秒
    client_header_timeout       60s;      # 设置客户端请求头的超时时间为60秒

    etag on;                              # 启用ETag头用于标识资源的版本,帮助浏览器进行缓存管理

    http3                           on;
    quic_gso                        on;   # 启用QUIC的GSO(大段发送卸载),提高QUIC性能
    #quic_bpf                       on;   # 启用QUIC的BPF(伯克利包过滤器)支持,用于进一步优化QUIC性能
    quic_active_connection_id_limit 8;    # QUIC连接的活动连接ID限制为8
    http3_max_concurrent_streams    512;  # 每个QUIC连接上允许的最大并发流数为512
    http3_stream_buffer_size        256k; # 每个HTTP/3流的缓冲区大小为256KB

    http2                           on;
    http2_max_concurrent_streams    512;  # 每个HTTP/2连接上允许的最大并发流数为512
    http2_recv_buffer_size          512k; # 设置HTTP/2接收缓冲区大小为512KB
    http2_chunk_size                16k;  # 设置HTTP/2响应数据的块大小为16KB

    ssl_prefer_server_ciphers       on;   # 选择服务器端指定的密码套件
    ssl_protocols TLSv1.3;                # 只使用TLSv1.3协议
    ssl_session_cache shared:SSL:30m;     # 启用SSL会话缓存,有效地减少SSL握手的开销,提高性能
    ssl_session_timeout             1h;   # SSL会话的超时时间为1小时,会话超时之前客户端可以重新使用相同的会话，减少握手的开销
    ssl_buffer_size                 32k;  # SSL传输缓冲区的大小为32KB
    ssl_stapling on;                      # 让服务器在握手过程中同时传递 OCSP 相应的技术
    ssl_stapling_verify on;

    ssl_ciphers ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256;

    # add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline';";
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;  # 启用HTTP严格传输安全(HSTS)头,强制浏览器仅通过HTTPS与服务器通信
    add_header X-Frame-Options "SAMEORIGIN" always;                                              # 防止点击劫持攻击,限制页面嵌套在同源框架中
    add_header X-XSS-Protection "1; mode=block" always;                                          # 启用浏览器的跨站脚本(XSS)过滤,并在检测到攻击时阻止页面加载
    add_header X-Content-Type-Options nosniff always;                                            # 防止浏览器进行MIME类型嗅探确保响应的内容类型与声明的类型一致,防止MIME类型混淆攻击
    add_header Referrer-Policy "no-referrer";                                                    # 控制HTTPReferer头的内容,保护用户隐私避免泄露来源信息
    add_header Permissions-Policy "geolocation=(), microphone=()";                               # 通过Permissions-Policy头限制特定的浏览器API,防止未经授权的访问
    add_header Vary "Accept-Encoding" always;                                                    # 指定Vary头,告知缓存服务器根据Accept-Encoding进行内容变体存储

    server_names_hash_max_size      1024; # 设置服务器名称(即域名)的哈希表的最大大小,默认值通常是512
    server_names_hash_bucket_size   128;  # 设置服务器名称哈希表的桶大小
    types_hash_max_size             2048; # 设置存储MIME类型的哈希表的最大大小,默认值通常是1024
    types_hash_bucket_size          128;  # 设置MIME类型哈希表的桶大小
    variables_hash_max_size         1024; # 设置存储NGINX变量的哈希表的最大大小,默认值通常是1024
    variables_hash_bucket_size      128;  # 设置变量哈希表的桶大小

    open_file_cache max=2000 inactive=30s; # 指定最多缓存2000个打开的文件描述符,一个文件在30秒内未被访问,则从缓存中移除
    open_file_cache_valid 60s;             # 指定NGINX在每60秒检查一次缓存的有效性
    open_file_cache_min_uses 2;            # 文件在缓存期间至少被使用2次,才能保留在缓存中
    open_file_cache_errors on;             # 启用对文件打开错误的缓存

    limit_conn_zone $binary_remote_addr zone=addr:20m;                # 定义连接数限制的共享内存区域,使用客户端的二进制形式的IP地址作为键,定义名为addr的共享内存区域大小为20MB
    limit_conn addr 30;                                               # 应用连接数限制的指令,使用前面定义的addr区域,允许每个客户端IP地址的最大并发连接数为30
    limit_req_zone $binary_remote_addr zone=ngx_zone:100m rate=45r/s; # 定义请求速率限制的共享内存区域,使用客户端的二进制形式的IP地址作为键,内存区域大小为100MB,每秒平均请求速率为45个
    limit_req zone=ngx_zone burst=160 nodelay;                        # 允许的最大突发请求数为160个,请求不延迟处理
    limit_rate_after 50m;                                             # 在传输50MB后开始限制带宽
    limit_rate       20m;                                             # 设置带宽限制 

    # FastCGI
    fastcgi_cache_path /var/cache/fst_cache levels=1:2 keys_zone=fst_cache:20m max_size=1g inactive=30m; # 定义FastCGI缓存路径缓存层次为1:2,区域名为fst_cache,大小为20MB,最大缓存大小为1GB,30分钟后未被访问的缓存将被删除
    fastcgi_cache_key "$scheme$request_method$host$request_uri$http_accept_encoding";                    # 设置FastCGI缓存键,包含请求的协议、方法、主机、URI和接收编码

    fastcgi_cache_methods GET HEAD;                     # 指定缓存的请求方法,仅缓存GET和HEAD请求
    fastcgi_cache_bypass $http_cookie;                  # 如果请求中包含Cookie,则绕过缓存
    fastcgi_no_cache $http_cookie;                      # 如果请求中包含Cookie,则不缓存响应
    
    fastcgi_cache_valid 200 301 302 120m;               # 对于200、301和302响应,缓存有效期为120分钟
    fastcgi_cache_valid 404 10m;                        # 对于404响应,缓存有效期为10分钟
    fastcgi_cache_valid 500 502 503 504 0;              # 对于500、502、503和504响应不缓存

    fastcgi_cache_lock on;                              # 启用缓存锁,防止多个请求同时处理相同的缓存未命中
    fastcgi_cache_lock_timeout 5s;                      # 设置缓存锁超时时间为5秒

    fastcgi_buffering             on;                     # 启用FastCGI响应缓冲
    fastcgi_buffer_size           128k;                   # 设置FastCGI响应缓冲区大小为128KB
    fastcgi_buffers               16 1024k;               # 设置用于FastCGI响应的缓冲区数量和大小(16个1024KB的缓冲区)
    fastcgi_busy_buffers_size     8m;                     # 设置正在使用的FastCGI缓冲区的最大大小为8MB
    fastcgi_keep_conn             on;                     # 在处理完请求后保持与FastCGI服务器的连接
    fastcgi_intercept_errors      on;                     # 启用错误拦截使Nginx能够处理FastCGI返回的错误

    fastcgi_connect_timeout       300s;                   # 设置与FastCGI服务器建立连接的超时时间为300秒
    fastcgi_send_timeout          300s;                   # 设置向FastCGI服务器发送请求的超时时间为300秒
    fastcgi_read_timeout          300s;                   # 设置从FastCGI服务器读取响应的超时时间为300秒

    # Proxy
    proxy_cache_path /var/cache/ngx_cache levels=1:2 keys_zone=ngx_cache:20m max_size=1g inactive=30m; # 定义代理缓存路径,缓存层次为1:2,区域名为ngx_cache,大小为20MB,最大缓存大小为1GB,30分钟后未被访问的缓存将被删除
    proxy_cache_key "$scheme$request_method$host$request_uri$http_accept_encoding";                    # 设置代理缓存键,包含请求的协议、方法、主机、URI和接收编码

    proxy_cache_methods GET HEAD;                     # 指定缓存的请求方法,仅缓存GET和HEAD请求
    proxy_cache_bypass $http_cookie;                  # 如果请求中包含Cookie,则绕过缓存
    proxy_no_cache $http_cookie;                      # 如果请求中包含Cookie,则不缓存响应
    
    proxy_cache_background_update on;                 # 启用后台更新,当缓存未命中时,允许新的请求更新缓存

    proxy_cache_valid 200 301 302 120m;               # 对于200、301和302响应,缓存有效期为120分钟
    proxy_cache_valid 404 10m;                        # 对于404响应,缓存有效期为10分钟
    proxy_cache_valid 500 502 503 504 0;              # 对于500、502、503和504响应不缓存

    proxy_cache_lock on;                              # 启用缓存锁,防止多个请求同时处理相同的缓存未命中
    proxy_cache_lock_timeout 5s;                      # 设置缓存锁超时时间为5秒

    proxy_buffering                on;                # 启用代理响应缓冲
    proxy_buffer_size              128k;              # 设置代理响应缓冲区大小为128KB
    proxy_buffers                  16 1024k;          # 设置用于代理响应的缓冲区数量和大小(16个1024KB的缓冲区)
    proxy_busy_buffers_size        8m;                # 设置正在使用的代理缓冲区的最大大小为8MB
    
    proxy_intercept_errors         on;                # 启用错误拦截,使Nginx能够处理后端服务器返回的错误

    proxy_headers_hash_max_size    1024;              # 设置代理请求头哈希表的最大大小为1024
    proxy_headers_hash_bucket_size 128;               # 设置代理请求头哈希表的桶大小为128

    proxy_connect_timeout          300s;              # 设置与后端服务器建立连接的超时时间为300秒
    proxy_send_timeout             300s;              # 设置向后端服务器发送请求的超时时间为300秒
    proxy_read_timeout             300s;              # 设置从后端服务器读取响应的超时时间为300秒

    include /etc/nginx/conf.d/*.conf;
}